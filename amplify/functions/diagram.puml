@startuml

hide empty fields
hide empty methods

package functions {

    package types {

        interface ZodSchema
        note top of ZodSchema: Reassembling a schema parsing marker

        package controller {
            ' TYPE MutableControllerCloudSettings
            interface MutableControllerCloudSettings implements functions.types.ZodSchema {
                + name: string
                + interval: number
            }
            ' TYPE ControllerCloudSettings
            interface ControllerCloudSettings implements functions.types.ZodSchema {
                + id: string
                + configURL: string
                + settings: MutableControllerCloudSettings
            }
            ' TYPE ControllerConfig
            interface ControllerConfig implements functions.types.ZodSchema {
                [mqtt]
                + username: string
                + password: string
                + path_RootCA: string
                + path_Certificate: string
                + path_PrivateKey: string
                + use_tls: boolean
                + host: string
                + port: number
            }
        }

        package data {
            ' TYPE DataAirQuality
            interface DataAirQuality implements functions.types.ZodSchema {
                + pm2_5: number
                + pm10: number
                + co2: number
                + temperature: number
                + humidity: number
            }
            ' TYPE DataAirQualityStoredEntry
            interface DataAirQualityStoredEntry implements functions.types.ZodSchema {
                + {key} controllerID: string
                + {key} timeStampISO: string
                + data: DataAirQuality
            }
            DataAirQualityStoredEntry -> DataAirQuality: stores internally
            ' TYPE DataAirQualityForController
            interface DataAirQualityForController implements functions.types.ZodSchema {
                + controllerID: string
                + data: DataAirQuality
            }
            DataAirQualityForController -> DataAirQuality: stores internally
            ' TYPE DataAirQualityForTime
            interface DataAirQualityForTime implements functions.types.ZodSchema {
                + timeStampISO: string
                + entries: DataAirQualityPerController[]
            }
            DataAirQualityForTime -> DataAirQualityForController: stores internally
        }

    }

    interface LambdaFunction {
        + handler
    }
    note top of LambdaFunction: Reassembling AWS Lambda function marker

    package controllers {

        ' FUNCTION "getAllControllers"
        package GetAllControllers {
            class GetAllControllers implements functions.LambdaFunction {
                + {override} handler

                + {static} getAllControllers(): string[]
            }
        }

        ' FUNCTION "addController"
        package AddController {
            class AddController implements functions.LambdaFunction {
                + {override} handler

                - {static} addController(settings: MutableControllerCloudSettings)
                - {static} createConfig(content: CreateConfigContent): string
                - {static} createZip(controllerID: string, content: CreateZipContent): CreateZipResult
            }
            AddController -> functions.types.controller.MutableControllerCloudSettings: uses directly
            AddController -> functions.types.controller.ControllerCloudSettings: uses indirectly
            AddController -> functions.types.controller.ControllerConfig: uses indirectly
            interface CreateZipContent {
                + contentCertificate: string
                + contentPrivateKey: string
            }
            interface CreateZipResult {
                + zipURL: string
            }
            interface CreateConfigContent {
                + id: string
                + pathCertificate: string
                + pathPrivateKey: string
                + pathRootCA: string
            }
        }

        ' FUNCTION getController
        package GetController {
            class GetController implements functions.LambdaFunction {
                + {override} handler

                + {static} getController(controllerID: string): ControllerCloudSettings
            }
            GetController -> functions.types.controller.ControllerCloudSettings: uses directly
        }
        GetController -> GetAllControllers.GetAllControllers: uses helper function

        ' FUNCTION modController
        package ModController {
            class ModController implements functions.LambdaFunction {
                + {override} handler

                - {static} modController(controllerID: string, settings: MutableControllerCloudSettings)
            }
            ModController -> functions.types.controller.MutableControllerCloudSettings: uses directly
        }
        ModController -> GetController.GetController: uses helper function

        ' FUNCTION delController
        package DelController {
            class DelController implements functions.LambdaFunction {
                + {override} handler

                - {static} delController(controllerID: string)
            }
        }
        DelController -> GetController.GetController: uses helper function

    }

    package data {

        ' FUNCTION getDataGuiding
        package GetDataGuiding {

            class GetDataGuiding implements functions.LambdaFunction {
                + {override} handler

                - {static} getDataGuiding(): DataAirQuality
            }
            GetDataGuiding -> functions.types.data.DataAirQuality: uses directly

        }

        ' FUNCTION getDataForTime
        package GetDataForTime {

            class GetDataForTime implements functions.LambdaFunction {
                + {override} handler

                - {static} getDataForTime(untilTimestamp: string, segments: number): DataAirQualityForTime[]
            }
            GetDataForTime -> functions.types.data.DataAirQualityForTime: uses directly

        }

    }

}

@enduml